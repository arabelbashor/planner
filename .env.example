# Google Calendar API Configuration
VITE_GOOGLE_CLIENT_ID=your_google_client_id_here
VITE_GOOGLE_CLIENT_SECRET=your_google_client_secret_here
VITE_GOOGLE_REDIRECT_URI=https://your-domain.com/auth/callback
VITE_GOOGLE_API_KEY=your_google_api_key_here

# Letta Agent Configuration (Vite + React)
VITE_LETTA_BASE_URL=https://api.letta.ai
VITE_LETTA_API_KEY=your_letta_api_key_here
VITE_LETTA_PROJECT_SLUG=default-project
VITE_LETTA_AGENT_ID=your_agent_id_here
VITE_LETTA_TEMPLATE_NAME=cal-planner-agent:latest

# Server Configuration
SERVER_PORT=3001
CLIENT_URL=http://localhost:5173

# Example values (replace with your actual credentials):
# VITE_GOOGLE_CLIENT_ID=123456789-abcdefghijklmnop.apps.googleusercontent.com
# VITE_GOOGLE_CLIENT_SECRET=GOCSPX-abcdefghijklmnopqrstuvwxyz
# VITE_GOOGLE_API_KEY=AIzaSyAbCdEfGhIjKlMnOpQrStUvWxYz123456

# ðŸ”§ OAUTH 2.0 CONFIGURATION INSTRUCTIONS:
# 
# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select existing one
# 3. Enable Google Calendar API:
#    - Go to "APIs & Services" > "Library"
#    - Search for "Google Calendar API"
#    - Click "Enable"
# 4. Create OAuth 2.0 Credentials:
#    - Go to "APIs & Services" > "Credentials"
#    - Click "Create Credentials" > "OAuth 2.0 Client IDs"
#    - Choose "Web application"
#    - In "Authorized redirect URIs", add your redirect URI
#    - Copy the Client ID and Client Secret to your .env file
# 5. Create an API Key:
#    - In "Credentials", click "Create Credentials" > "API Key"
#    - Copy the API key to your .env file
# 6. Configure OAuth Consent Screen:
#    - Go to "APIs & Services" > "OAuth consent screen"
#    - Fill in required information
#    - Add your email as a test user if in testing mode
# 
# ðŸ”’ SECURITY NOTES:
# - Never commit your .env file to version control
# - Use environment variables for all sensitive credentials
# - Consider implementing proper OAuth flow for production
# - Restrict API keys to specific domains in production
# - The redirect URI must match EXACTLY between Google Cloud Console and your .env file
# - Use HTTPS in production for security

# ðŸ“‹ REDIRECT URI EXAMPLES:
# Development: http://localhost:5173/auth/callback
# Production: https://yourdomain.com/auth/callback
# Bolt.new: https://your-bolt-url.webcontainer-api.io/auth/callback

# IMPORTANT: When setting up Google OAuth, make sure to request the full calendar scope:
# https://www.googleapis.com/auth/calendar (not just readonly)
# This enables full editing capabilities for Google Calendar events.

# ðŸ¤– LETTA AGENT CONFIGURATION:
# 
# IMPORTANT: This project uses Vite, so environment variables MUST be prefixed with VITE_
# 
# 1. Sign up for Letta Cloud at https://app.letta.ai
# 2. Create a new project or use the default project
# 3. Get your API key from the dashboard
# 4. Use the cal-planner-agent template or create your own
# 5. Optionally specify an existing agent ID
# 
# Configuration Options:
# - VITE_LETTA_BASE_URL: Letta API endpoint (default: https://api.letta.ai)
# - VITE_LETTA_API_KEY: Your Letta API key (required)
# - VITE_LETTA_PROJECT_SLUG: Your project slug (default: default-project)
# - VITE_LETTA_AGENT_ID: Specific agent ID (optional, will create if not provided)
# - VITE_LETTA_TEMPLATE_NAME: Template for agent creation (default: cal-planner-agent:latest)
#
# Example Letta configuration:
# VITE_LETTA_BASE_URL=https://api.letta.ai
# VITE_LETTA_API_KEY=letta_sk_1234567890abcdef
# VITE_LETTA_PROJECT_SLUG=my-calendar-project
# VITE_LETTA_AGENT_ID=agent_abcd1234
# VITE_LETTA_TEMPLATE_NAME=cal-planner-agent:latest
#
# Legacy support: REACT_APP_ prefixed variables are also supported for compatibility

# ðŸ”§ COMPOSIO INTEGRATION:
#
# The server-side Composio integration uses the same Letta credentials
# No additional configuration is needed for basic Composio functionality
# The server will automatically use VITE_LETTA_BASE_URL and VITE_LETTA_API_KEY